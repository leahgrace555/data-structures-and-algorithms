/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package dataStructures;

import dataStructures.linkedList.LinkedList;
import org.junit.Test;
import sun.awt.image.ImageWatched;

import static org.junit.Assert.*;

public class AppTest {
   @Test public void testLinkedList() {
        LinkedList listy = new LinkedList();

       assertNotNull(listy);
    }

    @Test public void testAddToFront() {
        LinkedList listy = new LinkedList();
        listy.addToFront(2);
//        listy.addToFront(3);
//        listy.addToFront(4);
        System.out.println(listy); //should be 4,3,2

       assertEquals("This should return a node","{2} -> null ",listy.toString(listy.head));
    }

    @Test public void textGetKthValue() throws Exception {
       LinkedList listy = new LinkedList();
       listy.addToFront(2);
       listy.addToFront(3);
       listy.addToFront(4);
       System.out.println(listy.toString(listy.head)); //should be 4,3,2
        listy.valueFromKth(2);

        assertEquals("The expected value is ", 3, listy.valueFromKth(2));
    }

    @Test
    public void testZipper(){

        LinkedList listy = new LinkedList();
        LinkedList listy2 = new LinkedList();

        listy.addToFront(2);
        listy.addToFront(3);
        listy.addToFront(4);

        listy2.addToFront(5);
        listy2.addToFront(6);
        listy2.addToFront(7);

//        LinkedList ll = new LinkedList();
//        LinkedList ll2 = new LinkedList();
//        ll.insert(3);
//        ll.insert(2);
//        ll.insert(1);
//        ll2.insert(7);
//        ll2.insert(6);
//        ll2.insert(5);
//
       listy.zipLists(listy, listy2);

       System.out.println(listy);

     //   assertEquals("we should get 1 -> 6 -> 2 and so on", listy.toString());
    }
}



//        listy.addToFront(2);
//        listy.addToFront(3);
//        listy.addToFront(4);
//        System.out.println(listy); //should be 4,3,2
//
//        listy.addToEnd(7);
//        listy.addToEnd(8);
//        listy.addToEnd(9);
//        System.out.println(listy + "should say 4 3 2 7 8 9");

       /* listy.addAfter(2,28);
        System.out.println(listy);
        try {
            listy.removeFromEnd();
        } catch(Exception e) {
            System.out.println("could not remove form list");
        }
        System.out.println(listy);

        */

       // assertEquals();

   // }

